{"code":"import { Display, RNG, Scheduler, Engine, Color } from \"rot-js/lib/index\";\r\nimport Digger from \"rot-js/lib/map/digger\";\r\nimport Mob from \"./Mob\";\r\nexport var game;\r\nvar screenBg = Color.fromString(\"#180C24\");\r\nexport function distance(a, b) {\r\n    var x = a[0] - b[0];\r\n    var y = a[1] - b[1];\r\n    return Math.sqrt(x * x + y * y);\r\n}\r\nvar Ticker = /** @class */ (function () {\r\n    function Ticker() {\r\n    }\r\n    Ticker.prototype.getSpeed = function () {\r\n        return 100;\r\n    };\r\n    Ticker.prototype.act = function () {\r\n        var remove;\r\n        for (var _i = 0, _a = game.mobs; _i < _a.length; _i++) {\r\n            var mob = _a[_i];\r\n            remove = [];\r\n            mob.scent = mob.scent.filter(function (tile) {\r\n                tile.scent = Math.max(tile.scent - 0.05, 0.01);\r\n                return tile.scent > 0.01;\r\n            });\r\n        }\r\n    };\r\n    return Ticker;\r\n}());\r\nvar Tile = /** @class */ (function () {\r\n    function Tile(symbol) {\r\n        this.symbol = symbol;\r\n        this.seen = 0;\r\n        this.visible = 0;\r\n        this.scent = 0;\r\n        this.cost = [\"♠\", \"♣\"].includes(symbol) ? 1e6 : 1;\r\n    }\r\n    return Tile;\r\n}());\r\nexport { Tile };\r\nfunction add2d(a, b) {\r\n    return [a[0] + b[0], a[1] + b[1]];\r\n}\r\nfunction sub2d(a, b) {\r\n    return [a[0] - b[0], a[1] - b[1]];\r\n}\r\nvar Game = /** @class */ (function () {\r\n    function Game(w, h, options) {\r\n        if (w === void 0) { w = 100; }\r\n        if (h === void 0) { h = 100; }\r\n        if (options === void 0) { options = {}; }\r\n        this.mobs = [];\r\n        this.playerRaging = false;\r\n        this.emptyTile = new Tile(\"♠\");\r\n        game = this;\r\n        RNG.setSeed(options.seed || 1);\r\n        this.player = new Mob();\r\n        this.size = [w, h];\r\n        this.displaySize = options.displaySize || [60, 60];\r\n        var d = (this.d = new Display({\r\n            width: this.displaySize[0],\r\n            height: this.displaySize[1],\r\n            fontSize: 20,\r\n            spacing: 0.6,\r\n            forceSquareRatio: true,\r\n            bg: \"#180C24\",\r\n            fontFamily: \"Icons\"\r\n        }));\r\n        document.getElementById(\"game\").appendChild(d.getContainer());\r\n        this.generateMap();\r\n        var scheduler = new Scheduler.Speed();\r\n        scheduler.add(new Ticker(), true);\r\n        for (var _i = 0, _a = this.mobs; _i < _a.length; _i++) {\r\n            var mob = _a[_i];\r\n            scheduler.add(mob, true);\r\n        }\r\n        this.engine = new Engine(scheduler);\r\n        this.engine.start();\r\n        this.player.lookAround();\r\n        this.draw();\r\n    }\r\n    Game.prototype.at = function (at) {\r\n        return this.grid[at[0]][at[1]];\r\n    };\r\n    Game.prototype.safeAt = function (at) {\r\n        if (at[0] < 0 ||\r\n            at[1] < 0 ||\r\n            at[0] >= this.size[0] ||\r\n            at[1] >= this.size[1])\r\n            return this.emptyTile;\r\n        return this.grid[at[0]][at[1]];\r\n    };\r\n    Game.prototype.generateMap = function () {\r\n        var _this = this;\r\n        var w = this.size[0];\r\n        var h = this.size[1];\r\n        this.grid = new Array(w).fill(null).map(function (_) { return []; });\r\n        var map = new Digger(w, h, {\r\n            dugPercentage: 0.3,\r\n            corridorLength: [2, 6],\r\n            roomWidth: [3, 9],\r\n            roomHeight: [3, 5]\r\n        });\r\n        map.create(function (x, y, what) {\r\n            var symbol = what ? ((x + y) % 2 ? \"♠\" : \"♣\") : \" \";\r\n            _this.grid[x][y] = new Tile(symbol);\r\n        });\r\n        var rooms = (this.rooms = map.getRooms());\r\n        var roomsRandom = RNG.shuffle(rooms);\r\n        this.at(roomsRandom[0].getCenter()).symbol = \"☨\";\r\n        this.player.at = roomsRandom[1].getCenter();\r\n        var roses = 4;\r\n        var monsters = 20;\r\n        for (var i = 3; i < 3 + roses; i++) {\r\n            var room = roomsRandom[i];\r\n            this.at(room.getCenter()).symbol = \"⚘\";\r\n        }\r\n        for (var i = 3 + roses; i < 3 + roses + monsters; i++) {\r\n            var room = roomsRandom[i];\r\n            var monster = new Mob();\r\n            monster.at = room.getCenter();\r\n        }\r\n    };\r\n    Game.prototype.bg = function (at) {\r\n        var tile = this.safeAt(at);\r\n        var bg = [0, 0, 0];\r\n        if (tile.visible) {\r\n            var b = 48 * tile.visible;\r\n            bg = Color.add(bg, [b, b, b]);\r\n        }\r\n        else {\r\n            if (!tile.seen && tile.scent == 0) {\r\n                bg = this.hateBg;\r\n            }\r\n        }\r\n        if (tile.scent > 0) {\r\n            var scent = tile.scent;\r\n            var d = distance(at, this.player.at);\r\n            /*scent -= distance(at, this.player.at) / 100\r\n            scent -= (100 - this.player.rage) * 0.003\r\n            scent = Math.max(0, scent)*/\r\n            if (this.player.hate * 0.3 + 10 > d) {\r\n                bg = Color.add(bg, [\r\n                    128 * scent,\r\n                    0,\r\n                    0\r\n                ]);\r\n            }\r\n        }\r\n        return Color.toRGB(bg);\r\n    };\r\n    Game.prototype.draw = function () {\r\n        this.d.drawText(0, 0, \"_\".repeat(this.displaySize[1]));\r\n        this.d.drawText(0, 0, \"%b{red}%c{red}\" +\r\n            \"_\".repeat((this.player.hate / this.displaySize[1]) * 100));\r\n        this.hateBg = Color.add(screenBg, [0.64 * this.player.hate, 0, 0]);\r\n        //this.d.drawText(0,  0, Math.round(this.player.rage).toString())\r\n        var half = [\r\n            Math.floor(this.displaySize[0] / 2),\r\n            Math.floor(this.displaySize[1] / 2)\r\n        ];\r\n        var delta = [0, 0];\r\n        for (var _i = 0, _a = [0, 1]; _i < _a.length; _i++) {\r\n            var i = _a[_i];\r\n            delta[i] = -this.player.at[i] + half[i];\r\n        }\r\n        for (var x = this.player.at[0] - half[0]; x < this.player.at[0] + half[0]; x++)\r\n            for (var y = this.player.at[1] - half[1] + 1; y < this.player.at[1] + half[1] - 1; y++) {\r\n                var tile = this.safeAt([x, y]);\r\n                var c = tile.visible || tile.seen ? tile.symbol : \" \";\r\n                var displayAt = add2d([x, y], delta);\r\n                var bg = tile.seen ? \"#222\" : \"black\";\r\n                this.d.draw(displayAt[0], displayAt[1], c, [\"♠\", \"♣\", \".\"].includes(c) ? null : \"red\", this.bg([x, y]));\r\n            }\r\n        for (var _b = 0, _c = game.mobs; _b < _c.length; _b++) {\r\n            var mob = _c[_b];\r\n            var tile = game.at(mob.at);\r\n            if (tile.visible) {\r\n                var mobDisplayAt = add2d(mob.at, delta);\r\n                var c = \"white\";\r\n                if (this.player == mob && this.playerRaging)\r\n                    c = \"red\";\r\n                this.d.draw(mobDisplayAt[0], mobDisplayAt[1], this.player == mob ? \"☻\" : \"☺\", c, this.bg(mob.at));\r\n            }\r\n        }\r\n    };\r\n    return Game;\r\n}());\r\nexport default Game;\r\n","references":["d:/1/monster-master/node_modules/rot-js/lib/index.d.ts","d:/1/monster-master/node_modules/rot-js/lib/map/digger.d.ts","d:/1/monster-master/node_modules/rot-js/lib/map/features.d.ts","d:/1/monster-master/src/Mob.ts"]}
